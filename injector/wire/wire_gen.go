// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/vnnyx/golang-dot-api/controller"
	auth3 "github.com/vnnyx/golang-dot-api/controller/auth"
	transaction3 "github.com/vnnyx/golang-dot-api/controller/transaction"
	user3 "github.com/vnnyx/golang-dot-api/controller/user"
	"github.com/vnnyx/golang-dot-api/infrastructure"
	"github.com/vnnyx/golang-dot-api/middleware"
	"github.com/vnnyx/golang-dot-api/repository/auth"
	"github.com/vnnyx/golang-dot-api/repository/transaction"
	"github.com/vnnyx/golang-dot-api/repository/user"
	auth2 "github.com/vnnyx/golang-dot-api/service/auth"
	transaction2 "github.com/vnnyx/golang-dot-api/service/transaction"
	user2 "github.com/vnnyx/golang-dot-api/service/user"
)

// Injectors from wire.go:

func InitializeController(configName string) (*controller.Controller, error) {
	config := infrastructure.NewConfig(configName)
	db := infrastructure.NewMySQLDatabase(config)
	transactionRepository := transaction.NewTransactionRepository(db)
	client := infrastructure.NewRedisClient(configName)
	userRepository := user.NewUserRepository(db, client)
	transactionService := transaction2.NewTransactionService(transactionRepository, userRepository)
	authRepository := auth.NewAuthRepository(client)
	authMiddleware := middleware.NewAuthMiddleware(authRepository, userRepository, configName)
	transactionController := transaction3.NewTransactionController(transactionService, authMiddleware)
	producer, err := infrastructure.NewKafkaProducer()
	if err != nil {
		return nil, err
	}
	userService := user2.NewUserService(userRepository, transactionRepository, db, producer)
	consumer, err := infrastructure.NewKafkaConsumer()
	if err != nil {
		return nil, err
	}
	userController := user3.NewUserController(userService, authMiddleware, consumer)
	authService := auth2.NewAuthService(config, db, userRepository, authRepository)
	authController := auth3.NewAuthController(authService, authMiddleware)
	controllerController := controller.NewController(transactionController, userController, authController)
	return controllerController, nil
}
