// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/vnnyx/golang-dot-api/model/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// DeleteAllUser provides a mock function with given fields: ctx
func (_m *UserRepository) DeleteAllUser(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, tx, userId
func (_m *UserRepository) DeleteUser(ctx context.Context, tx *gorm.DB, userId string) error {
	ret := _m.Called(ctx, tx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) error); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllUser provides a mock function with given fields: ctx
func (_m *UserRepository) FindAllUser(ctx context.Context) ([]entity.User, error) {
	ret := _m.Called(ctx)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(context.Context) []entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: ctx, userId
func (_m *UserRepository) FindUserByID(ctx context.Context, userId string) (entity.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) FindUserByUsername(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) InsertUser(ctx context.Context, _a1 entity.User) (entity.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) UpdateUser(ctx context.Context, _a1 entity.User) (entity.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
